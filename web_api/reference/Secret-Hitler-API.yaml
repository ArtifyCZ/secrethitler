openapi: 3.0.0
info:
  title: Secret Hitler API
  version: 0.0.1
  license:
    name: GPL-3.0
servers:
  - url: 'http://localhost:8000'
tags:
- name: "Auth"
  description: "Everything about sessions (authorization)"
- name: "GraphQL"
- name: "GraphQL v1"
paths:
  /auth/anonymous:
    post:
      tags:
      - "Auth"
      summary: Login
      operationId: login-anonymous
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: string
                    minLength: 36
                    maxLength: 36
                  nickname:
                    type: string
                    minLength: 1
                    maxLength: 32
                  token:
                    type: string
                    minLength: 36
                    maxLength: 36
                required:
                  - id
                  - nickname
                  - token
              examples:
                example:
                  value:
                    id: 68a437a3-d285-458c-ae92-c2e0b767c53f
                    nickname: <name>
                    token: 8e4280e4-d1d3-43d3-aebd-2908cbcb755c
        '400':
          description: Missing username or not JSON
        '401':
          description: There is already an user with this username.
      x-internal: false
      description: Login anonymously
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                  maxLength: 32
            examples:
              Login using a username:
                value:
                  username: <name>
        description: ''
  /auth:
    get:
      tags:
      - "Auth"
      summary: Check session
      operationId: check_session
      responses:
        '200':
          description: Session is OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                Valid token:
                  value:
                    id: 65b8f8b1-e87c-403f-b01e-dbdb0d8e88a5
            application/xml:
              schema:
                type: object
                properties: {}
        '401':
          description: Invalid value or not existing token (header Authorization).
      description: |-
        Check if a token is valid.
        Returns user's uuid.
      security:
        - token: []
    delete:
      tags:
      - "Auth"
      summary: Logout
      operationId: logout
      responses:
        '204':
          description: Successfully logged out
        '401':
          description: Invalid value or not existing token (header Authorization).
      description: Logout
      security:
        - token: []
  /graphql/version:
    get:
      tags:
      - "GraphQL"
      summary: Check the graphql version
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                v1:
                  value: v1
      operationId: graphql-version
      description: Returns name of the newest version of the GraphQL API that's there.
  /graphql/v1:
    post:
      tags:
      - "GraphQL v1"
      summary: Interract with graphql
      operationId: post-graphql-v1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      createSlot:
                        type: object
                        properties:
                          uuid:
                            type: string
                            minLength: 1
                        required:
                          - uuid
                    required:
                      - createSlot
                required:
                  - data
              examples:
                New slot created:
                  value:
                    data:
                      createSlot:
                        uuid: 9c68af76-0398-45cb-a7dd-cd0fc8491c5d
        '401':
          description: Token not found
          content:
            application/json:
              schema:
                type: string
              examples:
                Unauthorized:
                  value: Token not found
      parameters: []
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                query:
                  type: string
                  minLength: 1
              required:
                - query
            examples:
              Create a new slot:
                value:
                  query: 'mutation { createSlot(players: 5) { uuid } }'
components:
  schemas: {}
  parameters: {}
  securitySchemes:
    token:
      name: Authorization
      type: apiKey
      in: header
      description: ''
security: []
